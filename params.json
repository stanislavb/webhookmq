{"name":"WebhookMQ","tagline":"Receive webhooks and put them into a message queue","body":"# WebhookMQ\r\nReceive webhooks and put them into a message queue.\r\n\r\nBuilt in python using Django for web requests and kombu for message queue handling.\r\n\r\n## Message queues supported\r\nThe kombu library supports amqp, qpid, redis, mongodb and more: http://kombu.readthedocs.org/en/latest/userguide/connections.html\r\n\r\n## Webhooks supported\r\nNote that this app has no security. Any POST request to an endpoint using the right path prefix will result in an attempt to put a message on a queue, as long as request contents can be decoded as JSON or a key-value multipart/form-data.\r\n\r\nThe way to avoid abuse is to restrict access to this app in a firewall and validate message contents when consuming them from the queue.\r\n\r\n    http(s)://hostname.example.com/path/queue_name\r\n\r\nOn a successful request, HTTP 200 OK is returned. On some errors, content returned will be a JSON structure with a 'message' key.\r\n\r\n## Build\r\nEither pull an image automatically built from this repo (https://hub.docker.com/r/stanislavb/webhookmq/):\r\n\r\n    docker pull stanislavb/webhookmq\r\n\r\nOr build your own:\r\n\r\n    make build\r\n\r\n## Test\r\nTest code standards (requires flake8 installed):\r\n\r\n    make syntax-test\r\n\r\nTest integration with RabbitMQ:\r\n\r\n    make clean && make test\r\n\r\n## Deploy\r\nHosting of a message queue is not covered by this document, but if you have one provisioned, you can scale WebhookMQ horisontally just by starting more with same settings.\r\n\r\n    docker run -d \\\r\n        -e \"SECRET_KEY=foo\" \\\r\n        -e \"PATH_PREFIX=webhook\" \\\r\n        -e \"MQ_URI=amqp://user:password@mq.example.com/vhost/\" \\\r\n        stanislavb/webhookmq\r\n\r\nThe command above would start the service and accept POST requests at http://(container ip):8080/webhook/(queue_name)/\r\n\r\n### Use nginx proxy\r\nIt is extremely recommended to use a robust web server in front of any web application. You could for example use jwilder/nginx-proxy:\r\n\r\n    docker run -d \\\r\n        --name nginx-proxy \\\r\n        -v /var/run/docker.sock:/tmp/docker.sock:ro \\\r\n        -p 80:80 \\\r\n        jwilder/nginx-proxy\r\n\r\n    docker run -d \\\r\n        -e \"SECRET_KEY=foo\" \\\r\n        -e \"PATH_PREFIX=webhook\" \\\r\n        -e \"MQ_URI=amqp://user:password@mq.example.com/vhost/\" \\\r\n        -e \"VIRTUAL_HOST=public.example.com\" \\\r\n        stanislavb/webhookmq\r\n\r\nProvided DNS record for public.example.com would be pointing at this docker host machine, the service would accept POST requests at http://public.example.com/webhook/(queue_name)/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}